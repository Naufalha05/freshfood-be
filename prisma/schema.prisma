// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int       @id @default(autoincrement())
  name           String
  phoneNumber    String    @unique
  address        String
  password       String
  role           Role      @default(USER)
  profilePicture String?
  
  // Relations
  products       Product[] 
  comments       Comment[] 
  orders         Order[]   
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  
  // Relations
  products    Product[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       String   // ⚠️ Pertimbangkan mengubah ke Float untuk kalkulasi yang lebih baik
  imageUrl    String?
  userId      Int
  categoryId  Int
  
  // Relations dengan onDelete actions
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  comments    Comment[]
  orders      Order[]  // ✅ Ini akan diatur dari sisi Order model
}

model Comment {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  rating    Int      @default(1)
  text      String
  createdAt DateTime @default(now())
  
  // Relations dengan onDelete actions
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@index([productId])
}

model Order {
  id            Int           @id @default(autoincrement())
  productId     Int
  userId        Int
  quantity      Int           @default(1)
  weight        Float
  condition     String
  price         Float
  address       String
  paymentMethod PaymentMethod @default(QRIS)
  status        OrderStatus   @default(PENDING)
  createdAt     DateTime      @default(now())
  
  // Relations dengan onDelete actions - ✅ KEY CHANGES HERE
  product       Product       @relation(fields: [productId], references: [id], onDelete: Restrict)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([status])
}

enum PaymentMethod {
  QRIS
  TUNAI
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  SHIPPED
  COMPLETED
  CANCELLED
}

enum Role {
  USER
  ADMIN
}
